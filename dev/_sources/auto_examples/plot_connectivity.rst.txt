
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_connectivity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_connectivity.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_connectivity.py:


=====================
07. Plot Connectivity
=====================

This example demonstrates how to modify the network connectivity.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default


    # Author: Nick Tolley <nicholas_tolley@brown.edu>

    import os.path as op








.. GENERATED FROM PYTHON SOURCE LINES 14-15

Let us import ``hnn_core``.

.. GENERATED FROM PYTHON SOURCE LINES 15-21

.. code-block:: default


    import hnn_core
    from hnn_core import read_params, Network, simulate_dipole

    hnn_core_root = op.dirname(hnn_core.__file__)








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Then we read the parameters file

.. GENERATED FROM PYTHON SOURCE LINES 23-26

.. code-block:: default

    params_fname = op.join(hnn_core_root, 'param', 'default.json')
    params = read_params(params_fname)








.. GENERATED FROM PYTHON SOURCE LINES 27-33

To explore how to modify network connectivity, we will start with simulating
the evoked response from the
:ref:`evoked example <sphx_glr_auto_examples_plot_simulate_evoked.py>`, and
explore how it changes with new connections. We first instantiate the
network. (Note: Setting ``add_drives_from_params=True`` loads a set of
predefined drives without the drives API shown previously).

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: default

    net = Network(params, add_drives_from_params=True)








.. GENERATED FROM PYTHON SOURCE LINES 36-40

Instantiating the network comes with a predefined set of connections that
reflect the canonical neocortical microcircuit. ``net.connectivity``
is a list of dictionaries which detail every cell-cell, and drive-cell
connection.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    print(len(net.connectivity))
    print(net.connectivity[0:2])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    30
    [L2_pyramidal -> L2_pyramidal
    cell counts: 100 srcs, 100 targets
    loc: 'proximal'; receptor: 'nmda'
    weight: 0.0005; delay: 1.0; lamtha: 3.0
     , L2_pyramidal -> L2_pyramidal
    cell counts: 100 srcs, 100 targets
    loc: 'proximal'; receptor: 'ampa'
    weight: 0.0005; delay: 1.0; lamtha: 3.0
     ]




.. GENERATED FROM PYTHON SOURCE LINES 44-47

Data recorded during simulations are stored under
:class:`~hnn_core.Cell_Response`. To test multiple network structures, we can
create a copy of the original network. The copied network is then simulated.

.. GENERATED FROM PYTHON SOURCE LINES 47-51

.. code-block:: default

    net_erp = net.copy()
    dpl_erp = simulate_dipole(net_erp, n_trials=1)
    net_erp.cell_response.plot_spikes_raster()




.. image:: /auto_examples/images/sphx_glr_plot_connectivity_001.png
    :alt: plot connectivity
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    joblib will run over 1 jobs
    Building the NEURON model
    [Done]
    running trial 1 on 1 cores
    Simulation time: 0.03 ms...
    Simulation time: 10.0 ms...
    Simulation time: 20.0 ms...
    Simulation time: 30.0 ms...
    Simulation time: 40.0 ms...
    Simulation time: 50.0 ms...
    Simulation time: 60.0 ms...
    Simulation time: 70.0 ms...
    Simulation time: 80.0 ms...
    Simulation time: 90.0 ms...
    Simulation time: 100.0 ms...
    Simulation time: 110.0 ms...
    Simulation time: 120.0 ms...
    Simulation time: 130.0 ms...
    Simulation time: 140.0 ms...
    Simulation time: 150.0 ms...
    Simulation time: 160.0 ms...

    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 52-59

We can modify the connectivity list to test the effect of different
connectivity patterns. For example, we can remove all layer 2 inhibitory
connections. In the default network, the src_gids of each connection are
all the same cell type.. Connections are stored under ``conn['gid_pairs']``
as a dictionary indexed by src_gid:
``{src_gid1: [target_gid1, target_gid2], ...]``. Each src_gid indexes a
list with its target gids

.. GENERATED FROM PYTHON SOURCE LINES 59-67

.. code-block:: default

    new_connectivity = [conn for conn in net.connectivity
                        if conn['src_type'] != 'L2_basket']
    net.connectivity = new_connectivity

    net_remove = net.copy()
    dpl_remove = simulate_dipole(net_remove, n_trials=1)
    net_remove.cell_response.plot_spikes_raster()




.. image:: /auto_examples/images/sphx_glr_plot_connectivity_002.png
    :alt: plot connectivity
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    joblib will run over 1 jobs
    Building the NEURON model
    [Done]
    running trial 1 on 1 cores
    Simulation time: 0.03 ms...
    Simulation time: 10.0 ms...
    Simulation time: 20.0 ms...
    Simulation time: 30.0 ms...
    Simulation time: 40.0 ms...
    Simulation time: 50.0 ms...
    Simulation time: 60.0 ms...
    Simulation time: 70.0 ms...
    Simulation time: 80.0 ms...
    Simulation time: 90.0 ms...
    Simulation time: 100.0 ms...
    Simulation time: 110.0 ms...
    Simulation time: 120.0 ms...
    Simulation time: 130.0 ms...
    Simulation time: 140.0 ms...
    Simulation time: 150.0 ms...
    Simulation time: 160.0 ms...

    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 68-77

That's a lot of spiking! Since basket cells are inhibitory, removing these
connections increases network wide excitability. We can additionally add
new connections using ``net.add_connection()``. Let's try connecting a
single layer 2 basket cell, to every layer 2 pyramidal cell. We can utilize
``net.gid_ranges`` to help find the gids of interest.
:meth:`hnn_core.Network.add_connection` allows connections to be specified
with either cell names, or the gids directly. If multiple gids are provided
for either the sources or the targets, they will be connected in an
all-to-all pattern.

.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: default

    print(net.gid_ranges)
    src_gid = net.gid_ranges['L2_basket'][0]
    target_gids = 'L2_pyramidal'
    location, receptor = 'soma', 'gabaa'
    weight, delay, lamtha = 1.0, 1.0, 70
    net.add_connection(src_gid, target_gids, location, receptor,
                       delay, weight, lamtha)

    net_add = net.copy()
    dpl_add = simulate_dipole(net_add, n_trials=1)
    net_add.cell_response.plot_spikes_raster()




.. image:: /auto_examples/images/sphx_glr_plot_connectivity_003.png
    :alt: plot connectivity
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'L2_basket': range(0, 35), 'L2_pyramidal': range(35, 135), 'L5_basket': range(135, 170), 'L5_pyramidal': range(170, 270), 'bursty1': range(270, 271), 'bursty2': range(271, 272), 'evdist1': range(272, 542), 'evprox1': range(542, 812), 'evprox2': range(812, 1082), 'extgauss': range(1082, 1352), 'extpois': range(1352, 1622)}
    joblib will run over 1 jobs
    Building the NEURON model
    [Done]
    running trial 1 on 1 cores
    Simulation time: 0.03 ms...
    Simulation time: 10.0 ms...
    Simulation time: 20.0 ms...
    Simulation time: 30.0 ms...
    Simulation time: 40.0 ms...
    Simulation time: 50.0 ms...
    Simulation time: 60.0 ms...
    Simulation time: 70.0 ms...
    Simulation time: 80.0 ms...
    Simulation time: 90.0 ms...
    Simulation time: 100.0 ms...
    Simulation time: 110.0 ms...
    Simulation time: 120.0 ms...
    Simulation time: 130.0 ms...
    Simulation time: 140.0 ms...
    Simulation time: 150.0 ms...
    Simulation time: 160.0 ms...

    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 90-94

Adding more inhibitory connections did not completely restore the normal
spiking. L2 basket and pyramidal cells rhythymically fire in the gamma
range (30-80 Hz). As a final step, we can see how this change in spiking
activity impacts the aggregate current dipole.

.. GENERATED FROM PYTHON SOURCE LINES 94-103

.. code-block:: default

    import matplotlib.pyplot as plt
    from hnn_core.viz import plot_dipole
    fig, axes = plt.subplots(2, 1, sharex=True, figsize=(6, 6),
                             constrained_layout=True)
    dpls = [dpl_erp[0], dpl_remove[0], dpl_add[0]]
    plot_dipole(dpls, ax=axes[0], layer='agg', show=False)
    axes[0].legend(['Normal', 'No L2 Basket', 'Single L2 Basket'])
    net_erp.cell_response.plot_spikes_hist(
        ax=axes[1], spike_types=['evprox', 'evdist'])



.. image:: /auto_examples/images/sphx_glr_plot_connectivity_004.png
    :alt: Aggregate (L2 + L5)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 600x600 with 2 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  23.203 seconds)


.. _sphx_glr_download_auto_examples_plot_connectivity.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/jonescompneurolab/hnn-core/gh-pages?filepath=dev/notebooks/auto_examples/plot_connectivity.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_connectivity.py <plot_connectivity.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_connectivity.ipynb <plot_connectivity.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
