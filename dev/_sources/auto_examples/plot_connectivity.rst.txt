
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_connectivity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_connectivity.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_connectivity.py:


=====================
06. Plot Connectivity
=====================

This example demonstrates how to modify the network connectivity.

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: default


    # Author: Nick Tolley <nicholas_tolley@brown.edu>

    # sphinx_gallery_thumbnail_number = 5

    import os.path as op








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Let us import ``hnn_core``.

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: default


    import hnn_core
    from hnn_core import read_params, default_network, simulate_dipole

    hnn_core_root = op.dirname(hnn_core.__file__)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Then we read the parameters file

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default

    params_fname = op.join(hnn_core_root, 'param', 'default.json')
    params = read_params(params_fname)








.. GENERATED FROM PYTHON SOURCE LINES 29-35

To explore how to modify network connectivity, we will start with simulating
the evoked response from the
:ref:`evoked example <sphx_glr_auto_examples_plot_simulate_evoked.py>`, and
explore how it changes with new connections. We first instantiate the
network. (Note: Setting ``add_drives_from_params=True`` loads a set of
predefined drives without the drives API shown previously).

.. GENERATED FROM PYTHON SOURCE LINES 35-37

.. code-block:: default

    net_erp = default_network(params, add_drives_from_params=True)








.. GENERATED FROM PYTHON SOURCE LINES 38-42

Instantiating the network comes with a predefined set of connections that
reflect the canonical neocortical microcircuit. ``net.connectivity``
is a list of dictionaries which detail every cell-cell, and drive-cell
connection.

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default

    print(len(net_erp.connectivity))
    print(net_erp.connectivity[0:2])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    30
    [evdist1 -> L2_basket
    cell counts: 35 srcs, 35 targets
    connection probability: 1.0 
    loc: 'distal'; receptor: 'ampa'
    weight: 0.006562; delay: 0.1; lamtha: 3.0
     , evdist1 -> L2_basket
    cell counts: 35 srcs, 35 targets
    connection probability: 1.0 
    loc: 'distal'; receptor: 'nmda'
    weight: 0.019482; delay: 0.1; lamtha: 3.0
     ]




.. GENERATED FROM PYTHON SOURCE LINES 46-49

Data recorded during simulations are stored under
:class:`~hnn_core.Cell_Response`. Spiking activity can be visualized after
a simulation is using :meth:`~hnn_core.Cell_Response.plot_spikes_raster`

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default

    dpl_erp = simulate_dipole(net_erp, n_trials=1)
    net_erp.cell_response.plot_spikes_raster()




.. image:: /auto_examples/images/sphx_glr_plot_connectivity_001.png
    :alt: plot connectivity
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    joblib will run over 1 jobs
    Building the NEURON model
    [Done]
    running trial 1 on 1 cores
    Simulation time: 0.03 ms...
    Simulation time: 10.0 ms...
    Simulation time: 20.0 ms...
    Simulation time: 30.0 ms...
    Simulation time: 40.0 ms...
    Simulation time: 50.0 ms...
    Simulation time: 60.0 ms...
    Simulation time: 70.0 ms...
    Simulation time: 80.0 ms...
    Simulation time: 90.0 ms...
    Simulation time: 100.0 ms...
    Simulation time: 110.0 ms...
    Simulation time: 120.0 ms...
    Simulation time: 130.0 ms...
    Simulation time: 140.0 ms...
    Simulation time: 150.0 ms...
    Simulation time: 160.0 ms...

    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 53-63

We can also define our own connections to test the effect of different
connectivity patterns. To start, ``net.clear_connectivity()`` can be used
to clear all cell to cell connections. By default, previously defined drives
to the network are retained, but can be removed with ``net.clear_drives()``.
``net.add_connection`` is then used to create a custom network. Let us first
create an all-to-all connectivity pattern between the L5 pyramidal cells,
and L2 basket cells. :meth:`hnn_core.Network.add_connection` allows
connections to be specified with either cell names, or the gids directly.
If multiple gids are provided for either the sources or the targets,
they will be connected in an all-to-all pattern.

.. GENERATED FROM PYTHON SOURCE LINES 63-86

.. code-block:: default


    net_all = default_network(params, add_drives_from_params=True)
    net_all.clear_connectivity()

    # Pyramidal cell connections
    location, receptor = 'distal', 'ampa'
    weight, delay, lamtha = 1.0, 1.0, 70
    src = 'L5_pyramidal'
    for target in ['L5_pyramidal', 'L2_basket']:
        net_all.add_connection(src, target, location, receptor,
                               delay, weight, lamtha)

    # Basket cell connections
    location, receptor = 'soma', 'gabaa'
    weight, delay, lamtha = 1.0, 1.0, 70
    src = 'L2_basket'
    for target in ['L5_pyramidal', 'L2_basket']:
        net_all.add_connection(src, target, location, receptor,
                               delay, weight, lamtha)

    dpl_all = simulate_dipole(net_all, n_trials=1)
    net_all.cell_response.plot_spikes_raster()




.. image:: /auto_examples/images/sphx_glr_plot_connectivity_002.png
    :alt: plot connectivity
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    joblib will run over 1 jobs
    Building the NEURON model
    [Done]
    running trial 1 on 1 cores
    Simulation time: 0.03 ms...
    Simulation time: 10.0 ms...
    Simulation time: 20.0 ms...
    Simulation time: 30.0 ms...
    Simulation time: 40.0 ms...
    Simulation time: 50.0 ms...
    Simulation time: 60.0 ms...
    Simulation time: 70.0 ms...
    Simulation time: 80.0 ms...
    Simulation time: 90.0 ms...
    Simulation time: 100.0 ms...
    Simulation time: 110.0 ms...
    Simulation time: 120.0 ms...
    Simulation time: 130.0 ms...
    Simulation time: 140.0 ms...
    Simulation time: 150.0 ms...
    Simulation time: 160.0 ms...

    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 87-95

With the previous connection pattern there appears to be synchronous rhythmic
firing of the L5 pyramidal cells with a period of 10 ms. The synchronous
activity is visible as vertical lines where several cells fire simultaneously
We can additionally use the ``probability``. argument to create a sparse
connectivity pattern instead of all-to-all. Let's try creating the same
network with a 10% chance of cells connecting to each other. The resulting
connectivity pattern can also be visualized with
``net.connectivity[idx].plot()``

.. GENERATED FROM PYTHON SOURCE LINES 95-121

.. code-block:: default

    probability = 0.1
    net_sparse = default_network(params, add_drives_from_params=True)
    net_sparse.clear_connectivity()

    # Pyramidal cell connections
    location, receptor = 'distal', 'ampa'
    weight, delay, lamtha = 1.0, 1.0, 70
    src = 'L5_pyramidal'
    for target in ['L5_pyramidal', 'L2_basket']:
        net_sparse.add_connection(src, target, location, receptor,
                                  delay, weight, lamtha, probability)

    # Basket cell connections
    location, receptor = 'soma', 'gabaa'
    weight, delay, lamtha = 1.0, 1.0, 70
    src = 'L2_basket'
    for target in ['L5_pyramidal', 'L2_basket']:
        net_sparse.add_connection(src, target, location, receptor,
                                  delay, weight, lamtha, probability)

    dpl_sparse = simulate_dipole(net_sparse, n_trials=1)
    net_sparse.cell_response.plot_spikes_raster()

    net_sparse.connectivity[-2].plot()
    net_sparse.connectivity[-1].plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_connectivity_003.png
          :alt: plot connectivity
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_connectivity_004.png
          :alt: L2_basket -> L5_pyramidal (soma, gabaa)
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_connectivity_005.png
          :alt: L2_basket -> L2_basket (soma, gabaa)
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    joblib will run over 1 jobs
    Building the NEURON model
    [Done]
    running trial 1 on 1 cores
    Simulation time: 0.03 ms...
    Simulation time: 10.0 ms...
    Simulation time: 20.0 ms...
    Simulation time: 30.0 ms...
    Simulation time: 40.0 ms...
    Simulation time: 50.0 ms...
    Simulation time: 60.0 ms...
    Simulation time: 70.0 ms...
    Simulation time: 80.0 ms...
    Simulation time: 90.0 ms...
    Simulation time: 100.0 ms...
    Simulation time: 110.0 ms...
    Simulation time: 120.0 ms...
    Simulation time: 130.0 ms...
    Simulation time: 140.0 ms...
    Simulation time: 150.0 ms...
    Simulation time: 160.0 ms...

    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 122-127

Using the sparse connectivity pattern produced a lot more spiking in
the L5 pyramidal cells. Nevertheless there appears to be some rhythmicity
where the cells are firing synchronously with a smaller period of 4-5 ms.
As a final step, we can see how this change in spiking activity impacts
the aggregate current dipole.

.. GENERATED FROM PYTHON SOURCE LINES 127-136

.. code-block:: default

    import matplotlib.pyplot as plt
    from hnn_core.viz import plot_dipole
    fig, axes = plt.subplots(2, 1, sharex=True, figsize=(6, 6),
                             constrained_layout=True)
    dpls = [dpl_erp[0], dpl_all[0], dpl_sparse[0]]
    plot_dipole(dpls, ax=axes[0], layer='agg', show=False)
    axes[0].legend(['Default', 'Custom All', 'Custom Sparse'])
    net_erp.cell_response.plot_spikes_hist(
        ax=axes[1], spike_types=['evprox', 'evdist'])



.. image:: /auto_examples/images/sphx_glr_plot_connectivity_006.png
    :alt: Aggregate (L2 + L5)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 600x600 with 2 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  34.423 seconds)


.. _sphx_glr_download_auto_examples_plot_connectivity.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/jonescompneurolab/hnn-core/gh-pages?filepath=dev/notebooks/auto_examples/plot_connectivity.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_connectivity.py <plot_connectivity.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_connectivity.ipynb <plot_connectivity.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
