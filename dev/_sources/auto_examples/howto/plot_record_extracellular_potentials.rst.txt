
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/howto/plot_record_extracellular_potentials.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_howto_plot_record_extracellular_potentials.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_howto_plot_record_extracellular_potentials.py:


===================================
02. Record extracellular potentials
===================================

The main output of HNN simulations is the 'dipole' waveform, i.e., the net
intracellular current flowing in pyramidal cell apical dendrites. At the large
distances between cells and M/EEG sensors, this 'primary' current is the main
contributor to the measured fields. Close to the cells, the local field
potential (LFP) is the result of intracellular current leaking into the
extracellular medium through active and passive membrane channels. Under some
simplifying assumptions, we may approximate the LFP at virtual electrodes
placed in and around the HNN network model.

.. GENERATED FROM PYTHON SOURCE LINES 15-25

.. code-block:: default


    # Authors: Christopher Bailey <cjb@cfin.au.dk>
    #          Mainak Jas <mainakjas@gmail.com>
    #          Nick Tolley <nicholas_tolley@brown.edu>

    # sphinx_gallery_thumbnail_number = 3

    import os.path as op
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 26-30

We will use the default network with three evoked drives; see
:ref:`evoked example <sphx_glr_auto_examples_plot_simulate_evoked.py>` for
details. We'll go ahead and use the drive features defined in the parameter
file.

.. GENERATED FROM PYTHON SOURCE LINES 30-39

.. code-block:: default


    import hnn_core
    from hnn_core import read_params, default_network, simulate_dipole

    hnn_core_root = op.dirname(hnn_core.__file__)
    params_fname = op.join(hnn_core_root, 'param', 'default.json')
    params = read_params(params_fname)
    net = default_network(params, add_drives_from_params=True)








.. GENERATED FROM PYTHON SOURCE LINES 40-43

Extracellular recordings require specifying the electrode postions. It can be
useful to visualize the cells of the network to decide on the placement of
each electrode.

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    net.plot_cells()




.. image:: /auto_examples/howto/images/sphx_glr_plot_record_extracellular_potentials_001.png
    :alt: plot record extracellular potentials
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 640x480 with 1 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 46-57

The default network consists of 2 layers (L2 and L5), within which the cell
somas are arranged in a regular grid, and apical dendrites are aligned along
the z-axis. We can simulate a linear multielectrode array with 100 um
intercontact spacing [1]_ by specifying a list of (x, y, z) coordinate
triplets. The L5 pyramidal cell somas are at z=0 um, with apical dendrites
extending up to approximately z=2000 um. L2 pyramidal cell somas reside at
z=1300 um, and have apical dendrites extending to z=2300 um. We'll place the
recording array in the center of the network. By default, a value of
0.3 S/m is used for the constant extracellular conductivity and the
'point source approximation' for calculations; see
:meth:`hnn_core.Network.add_electrode_array` for details.

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: default


    depths = list(range(-525, 2750, 100))
    electrode_pos = [(4.5, 4.5, dep) for dep in depths]
    net.add_electrode_array('shank1', electrode_pos)








.. GENERATED FROM PYTHON SOURCE LINES 63-71

The electrode arrays are stored under ``Network.rec_arrays`` as a dictionary
of :class:`hnn_core.extracellular.ElectrodeArray` objects that are now
attached to the network and will be recorded during the simulation. Note that
calculating the extracellular potentials requires additional computational
resources and will thus slightly slow down the simulation.
:ref:`Using MPI <sphx_glr_auto_examples_plot_simulate_mpi_backend.py>` will
speed up computation considerably. Note that we will perform smoothing of the
dipole time series during plotting (``postproc=False``)

.. GENERATED FROM PYTHON SOURCE LINES 71-76

.. code-block:: default

    print(net.rec_arrays)
    net.plot_cells()

    dpl = simulate_dipole(net, postproc=False)




.. image:: /auto_examples/howto/images/sphx_glr_plot_record_extracellular_potentials_002.png
    :alt: plot record extracellular potentials
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'shank1': <ExtracellularArray | 33 electrodes, conductivity=0.3, method=psa (no data recorded yet)>}
    joblib will run over 1 jobs
    Building the NEURON model
    [Done]
    running trial 1 on 1 cores
    Simulation time: 0.03 ms...
    Simulation time: 10.0 ms...
    Simulation time: 20.0 ms...
    Simulation time: 30.0 ms...
    Simulation time: 40.0 ms...
    Simulation time: 50.0 ms...
    Simulation time: 60.0 ms...
    Simulation time: 70.0 ms...
    Simulation time: 80.0 ms...
    Simulation time: 90.0 ms...
    Simulation time: 100.0 ms...
    Simulation time: 110.0 ms...
    Simulation time: 120.0 ms...
    Simulation time: 130.0 ms...
    Simulation time: 140.0 ms...
    Simulation time: 150.0 ms...
    Simulation time: 160.0 ms...




.. GENERATED FROM PYTHON SOURCE LINES 77-81

For plotting both aggregate dipole moment and LFP traces, we'll use a 10 ms
smoothing window, after which both data can be decimated by a factor of 20
from 40 to 2 kHz sampling rates (note that decimation is applied in two
steps). Decimation speeds up plotting significantly.

.. GENERATED FROM PYTHON SOURCE LINES 81-108

.. code-block:: default

    trial_idx = 0
    window_len = 10  # ms
    decimate = [5, 4]  # from 40k to 8k to 2k
    fig, axs = plt.subplots(3, 1, sharex=True, figsize=(6, 8),
                            gridspec_kw={'height_ratios': [1, 3, 2]})

    # Then plot the aggregate dipole time series on its own axis
    dpl[trial_idx].copy().smooth(
        window_len=window_len).plot(ax=axs[0], decim=decimate,
                                    show=False)

    voltage_offset = 300  # the spacing between individual traces
    voltage_scalebar = 500  # can be different from offset
    # we can assign each electrode a unique color using a linear colormap
    colors = plt.get_cmap('cividis', len(electrode_pos))
    # use the same smoothing window on the LFP traces to allow comparison to dipole
    net.rec_arrays['shank1'][trial_idx].smooth(window_len=window_len).plot(
        ax=axs[1], contact_labels=depths, color=colors, decim=decimate, show=False,
        voltage_offset=voltage_offset, voltage_scalebar=voltage_scalebar)

    axs[1].grid(True, which='major', axis='x')
    axs[1].set_xlabel('')
    # Finally, add the spike raster to the bottom subplot
    net.cell_response.plot_spikes_raster(ax=axs[2], show=False)
    plt.tight_layout()
    plt.show()




.. image:: /auto_examples/howto/images/sphx_glr_plot_record_extracellular_potentials_003.png
    :alt: Aggregate (L2 + L5)
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-113

References
----------
.. [1] Kajikawa, Y. & Schroeder, C. E. How local is the local field
       potential? Neuron 72, 847â€“858 (2011).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  42.084 seconds)


.. _sphx_glr_download_auto_examples_howto_plot_record_extracellular_potentials.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/jonescompneurolab/hnn-core/gh-pages?filepath=dev/notebooks/auto_examples/howto/plot_record_extracellular_potentials.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_record_extracellular_potentials.py <plot_record_extracellular_potentials.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_record_extracellular_potentials.ipynb <plot_record_extracellular_potentials.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
