
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/howto/optimize_evoked.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_howto_optimize_evoked.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_howto_optimize_evoked.py:


=================================================
05. Optimize simulated evoked response parameters
=================================================

This example demonstrates how to optimize the parameters
of the model simulation to match an experimental dipole waveform.

.. GENERATED FROM PYTHON SOURCE LINES 9-18

.. code-block:: default


    # Authors: Blake Caldwell <blake_caldwell@brown.edu>
    #          Mainak Jas <mjas@mgh.harvard.edu>

    import os.path as op

    import numpy as np
    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 19-20

Let us import hnn_core

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: default


    import hnn_core
    from hnn_core import (MPIBackend, jones_2009_model, read_params,
                          simulate_dipole, read_dipole)


    hnn_core_root = op.join(op.dirname(hnn_core.__file__))

    # The number of cores may need modifying depending on your current machine.
    n_procs = 10


.. GENERATED FROM PYTHON SOURCE LINES 32-37

First, we will load experimental data into Dipole object.

This is a different experiment than the one to which the base parameters were
tuned. So, the initial RMSE will be large, giving the optimization procedure
a lot to work with.

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: default

    from urllib.request import urlretrieve

    data_url = ('https://raw.githubusercontent.com/jonescompneurolab/hnn/master/'
                'data/MEG_detection_data/S1_SupraT.txt')
    urlretrieve(data_url, 'S1_SupraT.txt')
    exp_dpl = read_dipole('S1_SupraT.txt')


.. GENERATED FROM PYTHON SOURCE LINES 45-46

Read the base parameters from a file

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default

    params_fname = op.join(hnn_core_root, 'param', 'default.json')
    params = read_params(params_fname)


.. GENERATED FROM PYTHON SOURCE LINES 50-56

Let's first simulate the dipole with some initial parameters. The parameter
definitions also contain the drives. Even though we could add drives
explicitly through our API
(see :ref:`sphx_glr_auto_examples_workflows_plot_simulate_evoked.py`),
for conciseness,
we add them automatically from the parameter files

.. GENERATED FROM PYTHON SOURCE LINES 56-66

.. code-block:: default


    scale_factor = 3000.
    smooth_window_len = 30.
    tstop = exp_dpl.times[-1]
    net = jones_2009_model(params=params, add_drives_from_params=True)
    with MPIBackend(n_procs=n_procs):
        print("Running simulation with initial parameters")
        initial_dpl = simulate_dipole(net, tstop=tstop, n_trials=1)[0]
        initial_dpl = initial_dpl.scale(scale_factor).smooth(smooth_window_len)


.. GENERATED FROM PYTHON SOURCE LINES 67-68

Now we start the optimization!

.. GENERATED FROM PYTHON SOURCE LINES 68-76

.. code-block:: default


    from hnn_core.optimization import optimize_evoked

    with MPIBackend(n_procs=n_procs):
        params_optim = optimize_evoked(params, exp_dpl, initial_dpl,
                                       scale_factor=scale_factor,
                                       smooth_window_len=smooth_window_len)


.. GENERATED FROM PYTHON SOURCE LINES 77-78

Now, let's simulate the dipole with the optimized parameters.

.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: default

    net = jones_2009_model(params=params_optim, add_drives_from_params=True)
    with MPIBackend(n_procs=n_procs):
        best_dpl = simulate_dipole(net, tstop=tstop, n_trials=1)[0]
        best_dpl = best_dpl.scale(scale_factor).smooth(smooth_window_len)


.. GENERATED FROM PYTHON SOURCE LINES 84-92

Finally, we can plot the results against experimental data along with the
input histograms:
1. Initial dipole
2. Optimized dipole fit

Upon visualizing the change in optimized versus initial dipole, you should
consider exploring which parameters were changed to cause the improved dipole
fit.

.. GENERATED FROM PYTHON SOURCE LINES 92-99

.. code-block:: default


    fig, axes = plt.subplots(2, 1, sharex=True, figsize=(6, 6))

    exp_dpl.plot(ax=axes[0], layer='agg', show=False)
    initial_dpl.plot(ax=axes[0], layer='agg', show=False)
    best_dpl.plot(ax=axes[0], layer='agg', show=False)
    net.cell_response.plot_spikes_hist(ax=axes[1])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_howto_optimize_evoked.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/jonescompneurolab/hnn-core/gh-pages?filepath=dev/notebooks/auto_examples/howto/optimize_evoked.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: optimize_evoked.py <optimize_evoked.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: optimize_evoked.ipynb <optimize_evoked.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
