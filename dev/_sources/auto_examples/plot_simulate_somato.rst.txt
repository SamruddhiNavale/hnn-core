
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_simulate_somato.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_simulate_somato.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_simulate_somato.py:


================================================
05. From MEG sensor-space data to HNN simulation
================================================

This example demonstrates how to calculate an inverse solution of the median
nerve evoked response potential (ERP) in S1 from the MNE somatosensory dataset,
and then simulate a biophysical model network that reproduces the observed
dynamics. Note that we do not expound on how we came up with the sequence of
evoked drives used in this example, rather, we only demonstrate its
implementation. For those who want more background on the HNN model and the
process used to articulate the proximal and distal drives needed to simulate
evoked responses, see the `HNN ERP tutorial`_. The sequence of evoked drives
presented here is not part of a current publication but is motivated by prior
studies [1]_, [2]_.

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: default


    # Authors: Mainak Jas <mainakjas@gmail.com>
    #          Ryan Thorpe <ryan_thorpe@brown.edu>

    # sphinx_gallery_thumbnail_number = 2








.. GENERATED FROM PYTHON SOURCE LINES 24-28

First, we will import the packages needed for computing the inverse solution
from the MNE somatosensory dataset. `MNE`_ can be installed with
``pip install mne``, and the somatosensory dataset can be downloaded by
importing ``somato`` from ``mne.datasets``.

.. GENERATED FROM PYTHON SOURCE LINES 28-35

.. code-block:: default

    import os.path as op
    import matplotlib.pyplot as plt

    import mne
    from mne.datasets import somato
    from mne.minimum_norm import apply_inverse, make_inverse_operator








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Now we set the the path of the ``somato`` dataset for subject ``'01'``.

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: default

    data_path = somato.data_path()
    subject = '01'
    task = 'somato'
    raw_fname = op.join(data_path, 'sub-{}'.format(subject), 'meg',
                        'sub-{}_task-{}_meg.fif'.format(subject, task))
    fwd_fname = op.join(data_path, 'derivatives', 'sub-{}'.format(subject),
                        'sub-{}_task-{}-fwd.fif'.format(subject, task))
    subjects_dir = op.join(data_path, 'derivatives', 'freesurfer', 'subjects')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Using default location ~/mne_data for somato...
    Creating ~/mne_data
    Downloading archive MNE-somato-data.tar.gz to /home/circleci/mne_data
    Downloading https://files.osf.io/v1/resources/rxvq7/providers/osfstorage/59c0e2849ad5a1025d4b7346?version=7&action=download&direct (582.2 MB)
      0%|          | Downloading : 0.00/582M [00:00<?,        ?B/s]      0%|          | Downloading : 0.99M/582M [00:00<00:15,    39.3MB/s]      0%|          | Downloading : 2.49M/582M [00:00<00:15,    40.2MB/s]      1%|          | Downloading : 5.49M/582M [00:00<00:14,    40.9MB/s]      1%|1         | Downloading : 7.49M/582M [00:00<00:14,    41.6MB/s]      2%|1         | Downloading : 9.49M/582M [00:00<00:14,    40.5MB/s]      2%|1         | Downloading : 11.5M/582M [00:00<00:14,    40.3MB/s]      2%|2         | Downloading : 13.5M/582M [00:00<00:14,    40.4MB/s]      3%|2         | Downloading : 15.5M/582M [00:00<00:14,    41.1MB/s]      3%|3         | Downloading : 17.5M/582M [00:00<00:14,    41.6MB/s]      3%|3         | Downloading : 19.5M/582M [00:00<00:16,    35.9MB/s]      4%|3         | Downloading : 20.5M/582M [00:00<00:17,    33.6MB/s]      4%|4         | Downloading : 23.5M/582M [00:00<00:16,    34.9MB/s]      4%|4         | Downloading : 25.5M/582M [00:00<00:16,    36.2MB/s]      5%|4         | Downloading : 27.5M/582M [00:00<00:15,    36.5MB/s]      5%|5         | Downloading : 31.5M/582M [00:00<00:15,    36.7MB/s]      6%|5         | Downloading : 33.5M/582M [00:00<00:15,    38.0MB/s]      6%|6         | Downloading : 35.5M/582M [00:00<00:15,    38.1MB/s]      6%|6         | Downloading : 37.5M/582M [00:00<00:14,    39.1MB/s]      7%|6         | Downloading : 39.5M/582M [00:01<00:14,    39.0MB/s]      7%|7         | Downloading : 41.5M/582M [00:01<00:14,    39.0MB/s]      7%|7         | Downloading : 43.5M/582M [00:01<00:14,    39.8MB/s]      8%|7         | Downloading : 45.5M/582M [00:01<00:13,    40.2MB/s]      8%|8         | Downloading : 47.5M/582M [00:01<00:13,    40.5MB/s]      9%|8         | Downloading : 49.5M/582M [00:01<00:13,    41.2MB/s]      9%|8         | Downloading : 51.5M/582M [00:01<00:13,    41.3MB/s]      9%|9         | Downloading : 53.5M/582M [00:01<00:13,    42.2MB/s]     10%|9         | Downloading : 55.5M/582M [00:01<00:13,    42.1MB/s]     10%|9         | Downloading : 57.5M/582M [00:01<00:13,    41.9MB/s]     10%|#         | Downloading : 59.5M/582M [00:01<00:13,    40.9MB/s]     11%|#         | Downloading : 61.5M/582M [00:01<00:13,    41.5MB/s]     11%|#         | Downloading : 63.5M/582M [00:01<00:14,    38.4MB/s]     11%|#1        | Downloading : 64.5M/582M [00:01<00:14,    38.5MB/s]     11%|#1        | Downloading : 66.5M/582M [00:01<00:13,    39.6MB/s]     12%|#1        | Downloading : 68.5M/582M [00:01<00:13,    40.3MB/s]     12%|#2        | Downloading : 70.5M/582M [00:01<00:12,    41.5MB/s]     12%|#2        | Downloading : 72.5M/582M [00:01<00:12,    42.8MB/s]     13%|#2        | Downloading : 74.5M/582M [00:01<00:12,    44.3MB/s]     13%|#3        | Downloading : 76.5M/582M [00:01<00:11,    44.5MB/s]     13%|#3        | Downloading : 78.5M/582M [00:01<00:11,    46.0MB/s]     14%|#3        | Downloading : 80.5M/582M [00:01<00:11,    45.4MB/s]     14%|#4        | Downloading : 82.5M/582M [00:01<00:11,    43.8MB/s]     15%|#4        | Downloading : 84.5M/582M [00:02<00:11,    43.8MB/s]     15%|#4        | Downloading : 86.5M/582M [00:02<00:11,    45.2MB/s]     15%|#5        | Downloading : 88.5M/582M [00:02<00:11,    46.5MB/s]     16%|#6        | Downloading : 94.5M/582M [00:02<00:10,    47.4MB/s]     17%|#6        | Downloading : 98.5M/582M [00:02<00:10,    48.6MB/s]     18%|#7        | Downloading : 102M/582M [00:02<00:09,    50.4MB/s]      18%|#8        | Downloading : 106M/582M [00:02<00:09,    51.9MB/s]     19%|#8        | Downloading : 110M/582M [00:02<00:09,    53.3MB/s]     20%|#9        | Downloading : 114M/582M [00:02<00:08,    55.2MB/s]     20%|##        | Downloading : 118M/582M [00:02<00:08,    56.4MB/s]     21%|##1       | Downloading : 122M/582M [00:02<00:08,    56.2MB/s]     22%|##1       | Downloading : 126M/582M [00:02<00:08,    56.8MB/s]     22%|##2       | Downloading : 130M/582M [00:02<00:08,    56.9MB/s]     23%|##3       | Downloading : 134M/582M [00:02<00:08,    58.3MB/s]     24%|##3       | Downloading : 138M/582M [00:02<00:07,    58.2MB/s]     24%|##4       | Downloading : 142M/582M [00:02<00:07,    58.9MB/s]     25%|##5       | Downloading : 146M/582M [00:02<00:07,    59.4MB/s]     26%|##5       | Downloading : 150M/582M [00:02<00:07,    60.7MB/s]     27%|##6       | Downloading : 154M/582M [00:02<00:07,    61.9MB/s]     27%|##7       | Downloading : 158M/582M [00:02<00:07,    63.4MB/s]     28%|##7       | Downloading : 162M/582M [00:02<00:06,    63.9MB/s]     29%|##8       | Downloading : 166M/582M [00:03<00:06,    64.8MB/s]     29%|##9       | Downloading : 170M/582M [00:03<00:06,    65.7MB/s]     30%|##9       | Downloading : 174M/582M [00:03<00:06,    67.1MB/s]     31%|###       | Downloading : 178M/582M [00:03<00:06,    68.8MB/s]     31%|###1      | Downloading : 182M/582M [00:03<00:05,    70.7MB/s]     32%|###2      | Downloading : 186M/582M [00:03<00:05,    72.8MB/s]     33%|###2      | Downloading : 190M/582M [00:03<00:05,    74.9MB/s]     33%|###3      | Downloading : 194M/582M [00:03<00:05,    76.8MB/s]     34%|###4      | Downloading : 198M/582M [00:03<00:05,    77.0MB/s]     35%|###4      | Downloading : 202M/582M [00:03<00:05,    75.7MB/s]     35%|###5      | Downloading : 206M/582M [00:03<00:05,    74.3MB/s]     36%|###6      | Downloading : 210M/582M [00:03<00:05,    75.2MB/s]     37%|###6      | Downloading : 214M/582M [00:03<00:05,    73.5MB/s]     38%|###7      | Downloading : 218M/582M [00:03<00:05,    75.1MB/s]     38%|###8      | Downloading : 222M/582M [00:03<00:05,    75.4MB/s]     39%|###8      | Downloading : 226M/582M [00:03<00:05,    69.1MB/s]     39%|###9      | Downloading : 228M/582M [00:03<00:05,    64.2MB/s]     40%|###9      | Downloading : 230M/582M [00:03<00:05,    62.8MB/s]     40%|###9      | Downloading : 232M/582M [00:04<00:06,    59.4MB/s]     40%|####      | Downloading : 234M/582M [00:04<00:06,    58.6MB/s]     41%|####      | Downloading : 236M/582M [00:04<00:06,    59.8MB/s]     41%|####      | Downloading : 238M/582M [00:04<00:06,    59.9MB/s]     41%|####1     | Downloading : 240M/582M [00:04<00:06,    58.0MB/s]     42%|####1     | Downloading : 242M/582M [00:04<00:06,    52.6MB/s]     42%|####2     | Downloading : 245M/582M [00:04<00:06,    52.5MB/s]     43%|####2     | Downloading : 247M/582M [00:04<00:06,    53.3MB/s]     43%|####2     | Downloading : 249M/582M [00:04<00:06,    53.6MB/s]     43%|####3     | Downloading : 251M/582M [00:04<00:06,    52.3MB/s]     44%|####3     | Downloading : 253M/582M [00:04<00:07,    46.7MB/s]     44%|####3     | Downloading : 254M/582M [00:04<00:07,    44.4MB/s]     44%|####4     | Downloading : 257M/582M [00:04<00:08,    42.3MB/s]     44%|####4     | Downloading : 258M/582M [00:04<00:09,    37.0MB/s]     45%|####4     | Downloading : 261M/582M [00:04<00:09,    36.5MB/s]     46%|####5     | Downloading : 267M/582M [00:05<00:08,    36.7MB/s]     47%|####6     | Downloading : 273M/582M [00:05<00:08,    36.8MB/s]     47%|####7     | Downloading : 275M/582M [00:05<00:08,    38.1MB/s]     48%|####8     | Downloading : 279M/582M [00:05<00:08,    39.6MB/s]     49%|####8     | Downloading : 283M/582M [00:05<00:07,    40.3MB/s]     49%|####9     | Downloading : 287M/582M [00:05<00:07,    41.9MB/s]     50%|#####     | Downloading : 291M/582M [00:05<00:07,    42.0MB/s]     51%|#####     | Downloading : 295M/582M [00:05<00:06,    43.2MB/s]     51%|#####1    | Downloading : 299M/582M [00:05<00:06,    44.5MB/s]     52%|#####2    | Downloading : 303M/582M [00:05<00:06,    45.6MB/s]     53%|#####2    | Downloading : 307M/582M [00:05<00:06,    47.0MB/s]     54%|#####3    | Downloading : 311M/582M [00:05<00:06,    44.5MB/s]     55%|#####4    | Downloading : 317M/582M [00:06<00:06,    45.0MB/s]     55%|#####5    | Downloading : 321M/582M [00:06<00:05,    46.0MB/s]     56%|#####5    | Downloading : 325M/582M [00:06<00:05,    47.5MB/s]     57%|#####6    | Downloading : 329M/582M [00:06<00:05,    49.3MB/s]     57%|#####7    | Downloading : 333M/582M [00:06<00:06,    42.5MB/s]     58%|#####7    | Downloading : 335M/582M [00:06<00:05,    43.9MB/s]     58%|#####7    | Downloading : 337M/582M [00:06<00:06,    41.1MB/s]     58%|#####8    | Downloading : 340M/582M [00:06<00:05,    42.4MB/s]     59%|#####8    | Downloading : 342M/582M [00:06<00:06,    41.8MB/s]     59%|#####9    | Downloading : 344M/582M [00:06<00:05,    42.8MB/s]     60%|#####9    | Downloading : 346M/582M [00:06<00:06,    39.6MB/s]     60%|######    | Downloading : 349M/582M [00:06<00:05,    41.0MB/s]     61%|######1   | Downloading : 355M/582M [00:07<00:06,    39.1MB/s]     61%|######1   | Downloading : 357M/582M [00:07<00:05,    40.1MB/s]     62%|######1   | Downloading : 359M/582M [00:07<00:05,    41.0MB/s]     62%|######2   | Downloading : 361M/582M [00:07<00:06,    34.2MB/s]     63%|######2   | Downloading : 364M/582M [00:07<00:06,    34.0MB/s]     63%|######2   | Downloading : 366M/582M [00:07<00:06,    35.3MB/s]     64%|######3   | Downloading : 372M/582M [00:07<00:06,    34.6MB/s]     65%|######4   | Downloading : 376M/582M [00:07<00:05,    36.0MB/s]     65%|######5   | Downloading : 378M/582M [00:07<00:05,    36.4MB/s]     65%|######5   | Downloading : 380M/582M [00:07<00:05,    37.7MB/s]     66%|######6   | Downloading : 384M/582M [00:08<00:05,    38.7MB/s]     66%|######6   | Downloading : 386M/582M [00:08<00:05,    38.5MB/s]     67%|######6   | Downloading : 388M/582M [00:08<00:05,    38.4MB/s]     67%|######7   | Downloading : 390M/582M [00:08<00:05,    39.7MB/s]     67%|######7   | Downloading : 392M/582M [00:08<00:05,    38.8MB/s]     68%|######7   | Downloading : 394M/582M [00:08<00:04,    40.0MB/s]     68%|######8   | Downloading : 396M/582M [00:08<00:04,    41.1MB/s]     68%|######8   | Downloading : 398M/582M [00:08<00:04,    42.5MB/s]     69%|######8   | Downloading : 400M/582M [00:08<00:04,    44.0MB/s]     69%|######9   | Downloading : 402M/582M [00:08<00:05,    35.2MB/s]     69%|######9   | Downloading : 403M/582M [00:08<00:05,    34.6MB/s]     70%|######9   | Downloading : 406M/582M [00:08<00:05,    35.5MB/s]     71%|#######   | Downloading : 410M/582M [00:08<00:04,    36.8MB/s]     71%|#######   | Downloading : 412M/582M [00:08<00:04,    38.1MB/s]     71%|#######1  | Downloading : 414M/582M [00:08<00:04,    39.5MB/s]     72%|#######1  | Downloading : 416M/582M [00:08<00:04,    39.6MB/s]     72%|#######1  | Downloading : 418M/582M [00:08<00:04,    39.9MB/s]     73%|#######2  | Downloading : 422M/582M [00:08<00:04,    41.4MB/s]     73%|#######2  | Downloading : 424M/582M [00:08<00:03,    41.8MB/s]     73%|#######3  | Downloading : 426M/582M [00:09<00:04,    40.2MB/s]     74%|#######3  | Downloading : 428M/582M [00:09<00:03,    40.8MB/s]     74%|#######3  | Downloading : 430M/582M [00:09<00:03,    41.3MB/s]     74%|#######4  | Downloading : 432M/582M [00:09<00:03,    42.2MB/s]     75%|#######4  | Downloading : 434M/582M [00:09<00:03,    43.6MB/s]     75%|#######5  | Downloading : 438M/582M [00:09<00:03,    42.1MB/s]     76%|#######5  | Downloading : 441M/582M [00:09<00:03,    43.4MB/s]     76%|#######6  | Downloading : 443M/582M [00:09<00:03,    44.7MB/s]     77%|#######7  | Downloading : 449M/582M [00:09<00:03,    46.2MB/s]     78%|#######7  | Downloading : 453M/582M [00:09<00:02,    47.8MB/s]     79%|#######8  | Downloading : 457M/582M [00:09<00:02,    47.3MB/s]     79%|#######8  | Downloading : 459M/582M [00:09<00:02,    46.8MB/s]     79%|#######9  | Downloading : 461M/582M [00:09<00:02,    43.8MB/s]     80%|#######9  | Downloading : 464M/582M [00:09<00:02,    43.5MB/s]     80%|########  | Downloading : 466M/582M [00:09<00:02,    44.8MB/s]     80%|########  | Downloading : 468M/582M [00:09<00:02,    43.9MB/s]     81%|########  | Downloading : 470M/582M [00:09<00:02,    45.4MB/s]     81%|########1 | Downloading : 472M/582M [00:09<00:02,    45.3MB/s]     81%|########1 | Downloading : 474M/582M [00:10<00:02,    42.1MB/s]     82%|########2 | Downloading : 477M/582M [00:10<00:02,    43.6MB/s]     83%|########2 | Downloading : 481M/582M [00:10<00:02,    44.9MB/s]     83%|########3 | Downloading : 483M/582M [00:10<00:02,    41.8MB/s]     84%|########3 | Downloading : 486M/582M [00:10<00:02,    43.2MB/s]     84%|########4 | Downloading : 490M/582M [00:10<00:02,    44.6MB/s]     85%|########5 | Downloading : 496M/582M [00:10<00:01,    46.2MB/s]     86%|########5 | Downloading : 500M/582M [00:10<00:01,    45.9MB/s]     87%|########6 | Downloading : 504M/582M [00:10<00:01,    47.1MB/s]     87%|########7 | Downloading : 508M/582M [00:10<00:01,    48.1MB/s]     88%|########8 | Downloading : 512M/582M [00:10<00:01,    49.2MB/s]     89%|########8 | Downloading : 516M/582M [00:10<00:01,    50.9MB/s]     89%|########9 | Downloading : 520M/582M [00:10<00:01,    52.8MB/s]     90%|######### | Downloading : 524M/582M [00:10<00:01,    52.4MB/s]     91%|######### | Downloading : 528M/582M [00:10<00:01,    54.3MB/s]     91%|#########1| Downloading : 532M/582M [00:10<00:01,    51.2MB/s]     92%|#########2| Downloading : 538M/582M [00:11<00:00,    46.5MB/s]     93%|#########2| Downloading : 540M/582M [00:11<00:00,    47.8MB/s]     93%|#########3| Downloading : 542M/582M [00:11<00:00,    48.9MB/s]     94%|#########3| Downloading : 544M/582M [00:11<00:00,    50.1MB/s]     94%|#########3| Downloading : 546M/582M [00:11<00:00,    51.7MB/s]     94%|#########4| Downloading : 548M/582M [00:11<00:00,    52.5MB/s]     95%|#########4| Downloading : 552M/582M [00:11<00:00,    54.0MB/s]     95%|#########5| Downloading : 554M/582M [00:11<00:00,    54.3MB/s]     96%|#########5| Downloading : 556M/582M [00:11<00:00,    55.9MB/s]     96%|#########5| Downloading : 558M/582M [00:11<00:00,    57.5MB/s]     96%|#########6| Downloading : 560M/582M [00:11<00:00,    58.9MB/s]     97%|#########6| Downloading : 562M/582M [00:11<00:00,    60.4MB/s]     97%|#########6| Downloading : 564M/582M [00:11<00:00,    59.6MB/s]     97%|#########7| Downloading : 566M/582M [00:11<00:00,    60.7MB/s]     98%|#########7| Downloading : 568M/582M [00:11<00:00,    61.9MB/s]     98%|#########7| Downloading : 570M/582M [00:11<00:00,    61.2MB/s]     98%|#########8| Downloading : 572M/582M [00:11<00:00,    57.1MB/s]     99%|#########8| Downloading : 574M/582M [00:11<00:00,    57.4MB/s]     99%|#########9| Downloading : 576M/582M [00:11<00:00,    58.4MB/s]     99%|#########9| Downloading : 578M/582M [00:11<00:00,    51.8MB/s]    100%|#########9| Downloading : 580M/582M [00:11<00:00,    53.2MB/s]    100%|##########| Downloading : 582M/582M [00:11<00:00,    51.0MB/s]
    Verifying hash 32fd2f6c8c7eb0784a1de6435273c48b.
    Decompressing the archive: /home/circleci/mne_data/MNE-somato-data.tar.gz
    (please be patient, this can take some time)
    Successfully extracted to: ['/home/circleci/mne_data/MNE-somato-data']
    Attempting to create new mne-python configuration file:
    /home/circleci/.mne/mne-python.json




.. GENERATED FROM PYTHON SOURCE LINES 47-48

Then, we load the raw data and estimate the inverse operator.

.. GENERATED FROM PYTHON SOURCE LINES 48-68

.. code-block:: default


    # Read and band-pass filter the raw data
    raw = mne.io.read_raw_fif(raw_fname, preload=True)
    l_freq, h_freq = 1, 40
    raw.filter(l_freq, h_freq)

    # Identify stimulus events associated with MEG time series in the dataset
    events = mne.find_events(raw, stim_channel='STI 014')

    # Define epochs within the time series
    event_id, tmin, tmax = 1, -.2, .17
    baseline = None
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, baseline=baseline,
                        reject=dict(grad=4000e-13, eog=350e-6), preload=True)

    # Compute the inverse operator
    fwd = mne.read_forward_solution(fwd_fname)
    cov = mne.compute_covariance(epochs)
    inv = make_inverse_operator(epochs.info, fwd, cov)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Opening raw data file /home/circleci/mne_data/MNE-somato-data/sub-01/meg/sub-01_task-somato_meg.fif...
        Range : 237600 ... 506999 =    791.189 ...  1688.266 secs
    Ready.
    Reading 0 ... 269399  =      0.000 ...   897.077 secs...
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 1 - 40 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal bandpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Lower passband edge: 1.00
    - Lower transition bandwidth: 1.00 Hz (-6 dB cutoff frequency: 0.50 Hz)
    - Upper passband edge: 40.00 Hz
    - Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 45.00 Hz)
    - Filter length: 993 samples (3.307 sec)

    111 events found
    Event IDs: [1]
    Not setting metadata
    Not setting metadata
    111 matching events found
    No baseline correction applied
    0 projection items activated
    Loading data for 111 events and 112 original time points ...
    0 bad epochs dropped
    Reading forward solution from /home/circleci/mne_data/MNE-somato-data/derivatives/sub-01/sub-01_task-somato-fwd.fif...
        Reading a source space...
        [done]
        Reading a source space...
        [done]
        2 source spaces read
        Desired named matrix (kind = 3523) not available
        Read MEG forward solution (8155 sources, 306 channels, free orientations)
        Source spaces transformed to the forward solution coordinate frame
    Computing rank from data with rank=None
        Using tolerance 1.5e-08 (2.2e-16 eps * 306 dim * 2.2e+05  max singular value)
        Estimated rank (mag + grad): 306
        MEG: rank 306 computed from 306 data channels with 0 projectors
    /home/circleci/project/examples/plot_simulate_somato.py:65: RuntimeWarning: Something went wrong in the data-driven estimation of the data rank as it exceeds the theoretical rank from the info (306 > 64). Consider setting rank to "auto" or setting it explicitly as an integer.
      cov = mne.compute_covariance(epochs)
    Reducing data rank from 306 -> 306
    Estimating covariance using EMPIRICAL
    Done.
    Number of samples used : 12432
    [done]
    Converting forward solution to surface orientation
        No patch info available. The standard source space normals will be employed in the rotation to the local surface coordinates....
        Converting to surface-based source orientations...
        [done]
    Computing inverse operator with 306 channels.
        306 out of 306 channels remain after picking
    Selected 306 channels
    Creating the depth weighting matrix...
        204 planar channels
        limit = 7615/8155 = 10.004172
        scale = 5.17919e-08 exp = 0.8
    Applying loose dipole orientations to surface source spaces: 0.2
    Whitening the forward solution.
    Computing rank from covariance with rank=None
        Using tolerance 2e-12 (2.2e-16 eps * 306 dim * 29  max singular value)
        Estimated rank (mag + grad): 64
        MEG: rank 64 computed from 306 data channels with 0 projectors
        Setting small MEG eigenvalues to zero (without PCA)
    Creating the source covariance matrix
    Adjusting source covariance matrix.
    Computing SVD of whitened and weighted lead field matrix.
        largest singular value = 2.42284
        scaling factor to adjust the trace = 3.86104e+18 (nchan = 306 nzero = 242)




.. GENERATED FROM PYTHON SOURCE LINES 69-77

There are several methods to do source reconstruction. Some of the methods
such as MNE are distributed source methods whereas dipole fitting will
estimate the location and amplitude of a single current dipole. At the
moment, we do not offer explicit recommendations on which source
reconstruction technique is best for HNN. However, we do want our users
to note that the dipole currents simulated with HNN are assumed to be normal
to the cortical surface. Hence, using the option ``pick_ori='normal'`` is
appropriate.

.. GENERATED FROM PYTHON SOURCE LINES 77-84

.. code-block:: default

    snr = 3.
    lambda2 = 1. / snr ** 2
    evoked = epochs.average()
    stc = apply_inverse(evoked, inv, lambda2, method='MNE',
                        pick_ori="normal", return_residual=False,
                        verbose=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Preparing the inverse operator for use...
        Scaled noise and source covariance from nave = 1 to nave = 111
        Created the regularized inverter
        The projection vectors do not apply to these channels.
        Created the whitener using a noise covariance matrix with rank 64 (242 small eigenvalues omitted)
    Applying inverse operator to "1"...
        Picked 306 channels from the data
        Computing inverse...
        Eigenleads need to be weighted ...
        Computing residual...
        Explained  86.1% variance
    [done]




.. GENERATED FROM PYTHON SOURCE LINES 85-87

To extract the primary response in primary somatosensory cortex (S1), we
create a label for the postcentral gyrus (S1) in source-space

.. GENERATED FROM PYTHON SOURCE LINES 87-93

.. code-block:: default

    hemi = 'rh'
    label_tag = 'G_postcentral'
    label_s1 = mne.read_labels_from_annot(subject, parc='aparc.a2009s', hemi=hemi,
                                          regexp=label_tag,
                                          subjects_dir=subjects_dir)[0]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reading labels from parcellation...
       read 1 labels from /home/circleci/mne_data/MNE-somato-data/derivatives/freesurfer/subjects/01/label/rh.aparc.a2009s.annot




.. GENERATED FROM PYTHON SOURCE LINES 94-105

Visualizing the distributed S1 activation in reference to the geometric
structure of the cortex (i.e., plotted on a structural MRI) can help us
figure out how to orient the dipole. Note that in the HNN framework,
positive and negative deflections of a current dipole source correspond to
upwards (from deep to superficial) and downwards (from superficial to deep)
current flow, respectively. Uncomment the following code to open an
interactive 3D render of the brain and its surface activation (requires the
``pyvista`` python library). You should get 2 plots, the first showing the
post-central gyrus label from which the dipole time course was extracted and
the second showing MNE activation at 0.040 sec that resemble the following
images.

.. GENERATED FROM PYTHON SOURCE LINES 105-115

.. code-block:: default

    '''
    Brain = mne.viz.get_brain_class()
    brain_label = Brain(subject, hemi, 'white', subjects_dir=subjects_dir)
    brain_label.add_label(label_s1, color='green', alpha=0.9)
    stc_label = stc.in_label(label_s1)
    brain = stc_label.plot(subjects_dir=subjects_dir, hemi=hemi, surface='white',
                           view_layout='horizontal', initial_time=0.04,
                           backend='pyvista')
    '''





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    "\nBrain = mne.viz.get_brain_class()\nbrain_label = Brain(subject, hemi, 'white', subjects_dir=subjects_dir)\nbrain_label.add_label(label_s1, color='green', alpha=0.9)\nstc_label = stc.in_label(label_s1)\nbrain = stc_label.plot(subjects_dir=subjects_dir, hemi=hemi, surface='white',\n                       view_layout='horizontal', initial_time=0.04,\n                       backend='pyvista')\n"



.. GENERATED FROM PYTHON SOURCE LINES 116-119

|mne_label_fig|

|mne_activity_fig|

.. GENERATED FROM PYTHON SOURCE LINES 121-129

Now we extract the representative time course of dipole activation in our
labeled brain region using ``mode='pca_flip'`` (see `this MNE-python
example`_ for more details). Note that the most prominent component of the
median nerve response occurs in the posterior wall of the central sulcus at
~0.040 sec. Since the dipolar activity here is negative, we orient the
extracted waveform so that the deflection at ~0.040 sec is pointed downwards.
Thus, the ~0.040 sec deflection corresponds to current flow traveling from
superficial to deep layers of cortex.

.. GENERATED FROM PYTHON SOURCE LINES 129-141

.. code-block:: default

    flip_data = stc.extract_label_time_course(label_s1, inv['src'],
                                              mode='pca_flip')
    dipole_tc = -flip_data[0] * 1e9

    plt.figure()
    plt.plot(1e3 * stc.times, dipole_tc, 'ro--')
    plt.xlabel('Time (ms)')
    plt.ylabel('Current Dipole (nAm)')
    plt.xlim((0, 170))
    plt.axhline(0, c='k', ls=':')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_simulate_somato_001.png
    :alt: plot simulate somato
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Extracting time courses for 1 labels (mode: pca_flip)




.. GENERATED FROM PYTHON SOURCE LINES 142-144

Now, let us try to simulate the same with ``hnn-core``. We read in the
network parameters from ``N20.json`` and instantiate the network.

.. GENERATED FROM PYTHON SOURCE LINES 144-156

.. code-block:: default


    import hnn_core
    from hnn_core import simulate_dipole, read_params, default_network
    from hnn_core import average_dipoles, JoblibBackend

    hnn_core_root = op.dirname(hnn_core.__file__)

    params_fname = op.join(hnn_core_root, 'param', 'N20.json')
    params = read_params(params_fname)

    net = default_network(params)








.. GENERATED FROM PYTHON SOURCE LINES 157-167

To simulate the source of the median nerve evoked response, we add a
sequence of synchronous evoked drives: 1 proximal, 2 distal, and 1 final
proximal drive. In order to understand the physiological implications of
proximal and distal drive as well as the general process used to articulate
a sequence of exogenous drive for simulating evoked responses, see the
`HNN ERP tutorial`_. Note that setting ``sync_within_trial=True`` creates
drives with synchronous input (arriving to and transmitted by hypothetical
granular cells at the center of the network) to all pyramidal and basket
cells that receive distal drive. Note that granule cells are not explicitly
modelled within HNN.

.. GENERATED FROM PYTHON SOURCE LINES 167-220

.. code-block:: default


    # Early proximal drive
    weights_ampa_p = {'L2_basket': 0.0036, 'L2_pyramidal': 0.0039,
                      'L5_basket': 0.0019, 'L5_pyramidal': 0.0020}
    weights_nmda_p = {'L2_basket': 0.0029, 'L2_pyramidal': 0.0005,
                      'L5_basket': 0.0030, 'L5_pyramidal': 0.0019}
    synaptic_delays_p = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,
                         'L5_basket': 1.0, 'L5_pyramidal': 1.0}

    net.add_evoked_drive(
        'evprox1', mu=21., sigma=4., numspikes=1, sync_within_trial=True,
        weights_ampa=weights_ampa_p, weights_nmda=weights_nmda_p,
        location='proximal', synaptic_delays=synaptic_delays_p, seedcore=6)

    # Late proximal drive
    weights_ampa_p = {'L2_basket': 0.003, 'L2_pyramidal': 0.0039,
                      'L5_basket': 0.004, 'L5_pyramidal': 0.0020}
    weights_nmda_p = {'L2_basket': 0.001, 'L2_pyramidal': 0.0005,
                      'L5_basket': 0.002, 'L5_pyramidal': 0.0020}
    synaptic_delays_p = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,
                         'L5_basket': 1.0, 'L5_pyramidal': 1.0}

    net.add_evoked_drive(
        'evprox2', mu=134., sigma=4.5, numspikes=1, sync_within_trial=True,
        weights_ampa=weights_ampa_p, weights_nmda=weights_nmda_p,
        location='proximal', synaptic_delays=synaptic_delays_p, seedcore=6)

    # Early distal drive
    weights_ampa_d = {'L2_basket': 0.0043, 'L2_pyramidal': 0.0032,
                      'L5_pyramidal': 0.0009}
    weights_nmda_d = {'L2_basket': 0.0029, 'L2_pyramidal': 0.0051,
                      'L5_pyramidal': 0.0010}
    synaptic_delays_d = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,
                         'L5_pyramidal': 0.1}

    net.add_evoked_drive(
        'evdist1', mu=32., sigma=2.5, numspikes=1, sync_within_trial=True,
        weights_ampa=weights_ampa_d, weights_nmda=weights_nmda_d,
        location='distal', synaptic_delays=synaptic_delays_d, seedcore=6)

    # Late distal drive
    weights_ampa_d = {'L2_basket': 0.0041, 'L2_pyramidal': 0.0019,
                      'L5_pyramidal': 0.0018}
    weights_nmda_d = {'L2_basket': 0.0032, 'L2_pyramidal': 0.0018,
                      'L5_pyramidal': 0.0017}
    synaptic_delays_d = {'L2_basket': 0.1, 'L2_pyramidal': 0.1,
                         'L5_pyramidal': 0.1}

    net.add_evoked_drive(
        'evdist2', mu=84., sigma=4.5, numspikes=1, sync_within_trial=True,
        weights_ampa=weights_ampa_d, weights_nmda=weights_nmda_d,
        location='distal', synaptic_delays=synaptic_delays_d, seedcore=2)








.. GENERATED FROM PYTHON SOURCE LINES 221-224

Now we run the simulation over 2 trials so that we can plot the average
aggregate dipole. For a better match to the empirical waveform, set
``n_trials`` to be >=25.

.. GENERATED FROM PYTHON SOURCE LINES 224-229

.. code-block:: default

    n_trials = 2
    # n_trials = 25
    with JoblibBackend(n_jobs=2):
        dpls = simulate_dipole(net, n_trials=n_trials, postproc=False)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    joblib will run over 2 jobs




.. GENERATED FROM PYTHON SOURCE LINES 230-237

Since the model is a reduced representation of the larger network
contributing to the response, the model response is noisier than it would be
in the net activity from a larger network where these effects are averaged
out, and the dipole amplitude is smaller than the recorded data. The
post-processing steps of smoothing and scaling the simulated dipole response
allow us to more accurately approximate the true signal responsible for the
recorded macroscopic evoked response [1]_, [2]_.

.. GENERATED FROM PYTHON SOURCE LINES 237-243

.. code-block:: default

    dpl_smooth_win = 20
    dpl_scalefctr = 12
    for dpl in dpls:
        dpl.smooth(dpl_smooth_win)
        dpl.scale(dpl_scalefctr)








.. GENERATED FROM PYTHON SOURCE LINES 244-246

Finally, we plot the driving spike histogram, empirical and simulated median
nerve evoked response waveforms, and output spike histogram.

.. GENERATED FROM PYTHON SOURCE LINES 246-258

.. code-block:: default

    fig, axes = plt.subplots(3, 1, sharex=True, figsize=(6, 6),
                             constrained_layout=True)
    net.cell_response.plot_spikes_hist(ax=axes[0],
                                       spike_types=['evprox', 'evdist'],
                                       show=False)
    axes[1].axhline(0, c='k', ls=':', label='_nolegend_')
    axes[1].plot(1e3 * stc.times, dipole_tc, 'r--')
    average_dipoles(dpls).plot(ax=axes[1], show=False)
    axes[1].legend(['MNE label average', 'HNN simulation'])
    axes[1].set_ylabel('Current Dipole (nAm)')
    net.cell_response.plot_spikes_raster(ax=axes[2])




.. image:: /auto_examples/images/sphx_glr_plot_simulate_somato_002.png
    :alt: Aggregate (L2 + L5)
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 600x600 with 3 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 259-270

References
----------
.. [1] Jones, S. R., Pritchett, D. L., Stufflebeam, S. M., Hämäläinen, M.
   & Moore, C. I. Neural correlates of tactile detection: a combined
   magnetoencephalography and biophysically based computational modeling
   study. J. Neurosci. 27, 10751–10764 (2007).
.. [2] Neymotin SA, Daniels DS, Caldwell B, McDougal RA, Carnevale NT,
   Jas M, Moore CI, Hines ML, Hämäläinen M, Jones SR. Human Neocortical
   Neurosolver (HNN), a new software tool for interpreting the cellular and
   network origin of human MEG/EEG data. eLife 9, e51214 (2020).
   https://doi.org/10.7554/eLife.51214

.. GENERATED FROM PYTHON SOURCE LINES 272-281

.. LINKS

.. _MNE: https://mne.tools/
.. _HNN ERP tutorial: https://jonescompneurolab.github.io/hnn-tutorials/erp/erp
.. _this MNE-python example: https://mne.tools/stable/auto_examples/inverse/plot_label_source_activations.html#sphx-glr-auto-examples-inverse-plot-label-source-activations-py
.. |mne_label_fig| image:: https://user-images.githubusercontent.com/20212206/106524603-cfe75c80-64b0-11eb-9607-3415195c3e7a.png # noqa
  :width: 400
.. |mne_activity_fig| image:: https://user-images.githubusercontent.com/20212206/106524542-b514e800-64b0-11eb-835e-497454e75eb9.png # noqa
  :width: 400


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  9.620 seconds)


.. _sphx_glr_download_auto_examples_plot_simulate_somato.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/jonescompneurolab/hnn-core/gh-pages?filepath=dev/notebooks/auto_examples/plot_simulate_somato.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_simulate_somato.py <plot_simulate_somato.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_simulate_somato.ipynb <plot_simulate_somato.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
