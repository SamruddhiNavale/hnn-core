
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_firing_pattern.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_firing_pattern.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_firing_pattern.py:


===================
Plot firing pattern
===================

This example demonstrates how to inspect the firing
pattern of cells in the HNN model.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

.. code-block:: default


    # Authors: Mainak Jas <mjas@harvard.mgh.edu>
    #          Nick Tolley <nick nicholas_tolley@brown.edu>

    import os.path as op








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Let us import hnn_core

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: default


    import hnn_core
    from hnn_core import read_params, Network, simulate_dipole

    hnn_core_root = op.dirname(hnn_core.__file__)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Then we read the parameters file

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default

    params_fname = op.join(hnn_core_root, 'param', 'default.json')
    params = read_params(params_fname)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Now let's build the network with somatic voltage recordings enabled

.. GENERATED FROM PYTHON SOURCE LINES 30-35

.. code-block:: default

    import matplotlib.pyplot as plt

    net = Network(params)
    dpls = simulate_dipole(net, n_trials=1, record_vsoma=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    joblib will run over 1 jobs
    Building the NEURON model
    [Done]
    running trial 1 on 1 cores
    Simulation time: 0.03 ms...
    Simulation time: 10.0 ms...
    Simulation time: 20.0 ms...
    Simulation time: 30.0 ms...
    Simulation time: 40.0 ms...
    Simulation time: 50.0 ms...
    Simulation time: 60.0 ms...
    Simulation time: 70.0 ms...
    Simulation time: 80.0 ms...
    Simulation time: 90.0 ms...
    Simulation time: 100.0 ms...
    Simulation time: 110.0 ms...
    Simulation time: 120.0 ms...
    Simulation time: 130.0 ms...
    Simulation time: 140.0 ms...
    Simulation time: 150.0 ms...
    Simulation time: 160.0 ms...




.. GENERATED FROM PYTHON SOURCE LINES 36-37

The cell IDs (gids) are stored in the network object as a dictionary

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    gid_ranges = net.gid_ranges
    print(net.gid_ranges)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'L2_basket': range(0, 35), 'L2_pyramidal': range(35, 135), 'L5_basket': range(135, 170), 'L5_pyramidal': range(170, 270), 'common': range(270, 272), 'evdist1': range(272, 542), 'evprox1': range(542, 812), 'evprox2': range(812, 1082), 'extgauss': range(1082, 1352), 'extpois': range(1352, 1622)}




.. GENERATED FROM PYTHON SOURCE LINES 41-44

Simulated voltage in the soma is stored in CellResponse as a dictionary.
The CellResponse object stores data produced by individual cells including
spikes, somatic voltages and currents.

.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: default

    trial_idx = 0
    vsoma = net.cell_response.vsoma[trial_idx]
    print(vsoma.keys())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    dict_keys([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269])




.. GENERATED FROM PYTHON SOURCE LINES 49-50

We can plot the firing pattern of individual cells by indexing with the gid

.. GENERATED FROM PYTHON SOURCE LINES 50-58

.. code-block:: default

    gid = 170
    plt.figure(figsize=(4, 4))
    plt.plot(net.cell_response.times, vsoma[gid])
    plt.title('%s (gid=%d)' % (net.gid_to_type(gid), gid))
    plt.xlabel('Time (ms)')
    plt.ylabel('Voltage (mV)')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_firing_pattern_001.png
    :alt: L5_pyramidal (gid=170)
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-61

Let's plot the soma voltage along with the spiking activity with raster
plots and histograms for the Pyramidal cells.

.. GENERATED FROM PYTHON SOURCE LINES 61-73

.. code-block:: default


    fig, axes = plt.subplots(3, 1, figsize=(5, 7), sharex=True)

    for idx in range(10):  # only 10 cells per cell-type
        gid = gid_ranges['L2_pyramidal'][idx]
        axes[0].plot(net.cell_response.times, vsoma[gid], color='g')
        gid = gid_ranges['L5_pyramidal'][idx]
        axes[0].plot(net.cell_response.times, vsoma[gid], color='r')
    net.cell_response.plot_spikes_raster(ax=axes[1])
    net.cell_response.plot_spikes_hist(ax=axes[2],
                                       spike_types=['L5_pyramidal',
                                                    'L2_pyramidal'])



.. image:: /auto_examples/images/sphx_glr_plot_firing_pattern_002.png
    :alt: plot firing pattern
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 500x700 with 3 Axes>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  54.084 seconds)


.. _sphx_glr_download_auto_examples_plot_firing_pattern.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/jonescompneurolab/hnn-core/gh-pages?filepath=stable/notebooks/auto_examples/plot_firing_pattern.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_firing_pattern.py <plot_firing_pattern.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_firing_pattern.ipynb <plot_firing_pattern.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
